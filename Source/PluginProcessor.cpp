/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin processor.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"



//==============================================================================
ToneWheelSineAudioProcessor::ToneWheelSineAudioProcessor()
{

}

ToneWheelSineAudioProcessor::~ToneWheelSineAudioProcessor()
{
}

//==============================================================================
const String ToneWheelSineAudioProcessor::getName() const
{
    return JucePlugin_Name;
}

int ToneWheelSineAudioProcessor::getNumParameters()
{
    return 0;
}

float ToneWheelSineAudioProcessor::getParameter (int index)
{
    return 0.0f;
}

void ToneWheelSineAudioProcessor::setParameter (int index, float newValue)
{
}

const String ToneWheelSineAudioProcessor::getParameterName (int index)
{
    return String();
}

const String ToneWheelSineAudioProcessor::getParameterText (int index)
{
    return String();
}

const String ToneWheelSineAudioProcessor::getInputChannelName (int channelIndex) const
{
    return String (channelIndex + 1);
}

const String ToneWheelSineAudioProcessor::getOutputChannelName (int channelIndex) const
{
    return String (channelIndex + 1);
}

bool ToneWheelSineAudioProcessor::isInputChannelStereoPair (int index) const
{
    return true;
}

bool ToneWheelSineAudioProcessor::isOutputChannelStereoPair (int index) const
{
    return true;
}

bool ToneWheelSineAudioProcessor::acceptsMidi() const
{
   #if JucePlugin_WantsMidiInput
    return true;
   #else
    return false;
   #endif
}

bool ToneWheelSineAudioProcessor::producesMidi() const
{
   #if JucePlugin_ProducesMidiOutput
    return true;
   #else
    return false;
   #endif
}

bool ToneWheelSineAudioProcessor::silenceInProducesSilenceOut() const
{
    return false;
}

double ToneWheelSineAudioProcessor::getTailLengthSeconds() const
{
    return 0.0;
}

int ToneWheelSineAudioProcessor::getNumPrograms()
{
    return 1;   // NB: some hosts don't cope very well if you tell them there are 0 programs,
                // so this should be at least 1, even if you're not really implementing programs.
}

int ToneWheelSineAudioProcessor::getCurrentProgram()
{
    return 0;
}

void ToneWheelSineAudioProcessor::setCurrentProgram (int index)
{
}

const String ToneWheelSineAudioProcessor::getProgramName (int index)
{
    return String();
}

void ToneWheelSineAudioProcessor::changeProgramName (int index, const String& newName)
{
}

//==============================================================================
void ToneWheelSineAudioProcessor::prepareToPlay (double sampleRate, int samplesPerBlock)
{
    // Use this method as the place to do any pre-playback
    // initialisation that you need..
	theWheelGenerator.initWheel(sampleRate);

}

void ToneWheelSineAudioProcessor::releaseResources()
{
    // When playback stops, you can use this as an opportunity to free up any
    // spare memory, etc.
}

void ToneWheelSineAudioProcessor::processBlock (AudioSampleBuffer& buffer, MidiBuffer& midiMessages)
{
	const int numSamples = buffer.getNumSamples();
	int channel, dp = 0;

	// Go through the incoming data, and apply our gain to it...
	//for (channel = 0; channel < getNumInputChannels(); ++channel)
		//buffer.applyGain(channel, 0, buffer.getNumSamples(), 1.0f);

	// Now pass any incoming midi messages to our keyboard state object, and let it
	// add messages to the buffer if the user is clicking on the on-screen keys
	//keyboardState.processNextMidiBuffer(midiMessages, 0, numSamples, true);

	// and now get the synth to process these midi events and generate its output.
	theWheelGenerator.renderNextBlock(buffer, 0, numSamples, midiMessages);
    

}

//==============================================================================
bool ToneWheelSineAudioProcessor::hasEditor() const
{
    return true; // (change this to false if you choose to not supply an editor)
}

AudioProcessorEditor* ToneWheelSineAudioProcessor::createEditor()
{
    return new ToneWheelSineAudioProcessorEditor (*this);
}


//==============================================================================
void ToneWheelSineAudioProcessor::getStateInformation (MemoryBlock& destData)
{
    // You should use this method to store your parameters in the memory block.
    // You could do that either as raw data, or use the XML or ValueTree classes
    // as intermediaries to make it easy to save and load complex data.
}


void ToneWheelSineAudioProcessor::setStateInformation (const void* data, int sizeInBytes)
{
    // You should use this method to restore your parameters from this memory block,
    // whose contents will have been created by the getStateInformation() call.
}

//==============================================================================
// This creates new instances of the plugin..
AudioProcessor* JUCE_CALLTYPE createPluginFilter()
{
    return new ToneWheelSineAudioProcessor();
}






