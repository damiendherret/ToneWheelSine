/*
  ==============================================================================

    This file was auto-generated by the Jucer!

    It contains the basic startup code for a Juce application.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"


//==============================================================================
FdnreverbAudioProcessor::FdnreverbAudioProcessor()
{
    for (int i = 0; i < FDNReverb::numParameters; ++i)
    {
        parameters.add (PluginParameter());
    }
    
    parameters.getReference (FDNReverb::earlyReflectionsGain).init (JUCE_STRINGIFY (earlyReflectionsGain),
                                                                    UnitGeneric,
                                                                    String::empty,
                                                                    1.0f);
    parameters.getReference (FDNReverb::earlyReflectionsTime).init (JUCE_STRINGIFY (earlyReflectionsTime),
                                                                    UnitGeneric,
                                                                    String::empty,
                                                                    1.0f);
}

FdnreverbAudioProcessor::~FdnreverbAudioProcessor()
{
}

//==============================================================================
const String FdnreverbAudioProcessor::getName() const
{
    return JucePlugin_Name;
}

int FdnreverbAudioProcessor::getNumParameters()
{
    return parameters.size();
}

float FdnreverbAudioProcessor::getParameter (int index)
{
    return parameters.getReference (index).getValue();
}

void FdnreverbAudioProcessor::setParameter (int index, float newValue)
{
    FDNReverb::Parameters params (reverb.getParameters());

    if (index == FDNReverb::earlyReflectionsGain)
    {
        params.earlyRelectionsGain = newValue;
    }
    else if (index == FDNReverb::earlyReflectionsTime)
    {
        params.earlyReflectionsTime = newValue;
    }

    reverb.setParameters (params);
}

const String FdnreverbAudioProcessor::getParameterName (int index)
{
    return parameters.getReference (index).getName();
}

const String FdnreverbAudioProcessor::getParameterText (int index)
{
    return String (getParameter (index), 2);
}

const String FdnreverbAudioProcessor::getInputChannelName (int channelIndex) const
{
    return String (channelIndex + 1);
}

const String FdnreverbAudioProcessor::getOutputChannelName (int channelIndex) const
{
    return String (channelIndex + 1);
}

bool FdnreverbAudioProcessor::isInputChannelStereoPair (int index) const
{
    return true;
}

bool FdnreverbAudioProcessor::isOutputChannelStereoPair (int index) const
{
    return true;
}

bool FdnreverbAudioProcessor::acceptsMidi() const
{
#if JucePlugin_WantsMidiInput
    return true;
#else
    return false;
#endif
}

bool FdnreverbAudioProcessor::producesMidi() const
{
#if JucePlugin_ProducesMidiOutput
    return true;
#else
    return false;
#endif
}

int FdnreverbAudioProcessor::getNumPrograms()
{
    return 0;
}

int FdnreverbAudioProcessor::getCurrentProgram()
{
    return 0;
}

void FdnreverbAudioProcessor::setCurrentProgram (int index)
{
}

const String FdnreverbAudioProcessor::getProgramName (int index)
{
    return String::empty;
}

void FdnreverbAudioProcessor::changeProgramName (int index, const String& newName)
{
}

//==============================================================================
void FdnreverbAudioProcessor::prepareToPlay (double sampleRate, int samplesPerBlock)
{
    // Use this method as the place to do any pre-playback
    // initialisation that you need..
    reverb.setSampleRate (sampleRate);
}

void FdnreverbAudioProcessor::releaseResources()
{
    // When playback stops, you can use this as an opportunity to free up any
    // spare memory, etc.
}

void FdnreverbAudioProcessor::processBlock (AudioSampleBuffer& buffer, MidiBuffer& midiMessages)
{
    if (getNumInputChannels() == 1)
    {
        reverb.processMono (buffer.getSampleData (0), buffer.getNumSamples());
    }
    else if (getNumInputChannels() == 2)
    {
        reverb.processStereo (buffer.getSampleData (0), buffer.getSampleData (1), buffer.getNumSamples());
    }

    
    // In case we have more outputs than inputs, we'll clear any output
    // channels that didn't contain input data, (because these aren't
    // guaranteed to be empty - they may contain garbage).
    for (int i = getNumInputChannels(); i < getNumOutputChannels(); ++i)
    {
        buffer.clear (i, 0, buffer.getNumSamples());
    }
}

//==============================================================================
bool FdnreverbAudioProcessor::hasEditor() const
{
    return true; // (change this to false if you choose to not supply an editor)
}

AudioProcessorEditor* FdnreverbAudioProcessor::createEditor()
{
    return new FdnreverbAudioProcessorEditor (this);
}

//==============================================================================
void FdnreverbAudioProcessor::getStateInformation (MemoryBlock& destData)
{
    // You should use this method to store your parameters in the memory block.
    // You could do that either as raw data, or use the XML or ValueTree classes
    // as intermediaries to make it easy to save and load complex data.
}

void FdnreverbAudioProcessor::setStateInformation (const void* data, int sizeInBytes)
{
    // You should use this method to restore your parameters from this memory block,
    // whose contents will have been created by the getStateInformation() call.
}

//==============================================================================
// This creates new instances of the plugin..
AudioProcessor* JUCE_CALLTYPE createPluginFilter()
{
    return new FdnreverbAudioProcessor();
}
